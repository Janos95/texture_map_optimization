layout(local_size_x = 1, local_size_y = 1) in;

layout(rgb32f, binding = 0)
uniform readonly image2DArray renderedImage;

layout(rgb32f, binding = 1)
uniform readonly image2D groundTruthImage;

layout(rg32f, binding = 2)
uniform readonly image3D jac;

layout(rgb32f, binding = 3)
uniform readonly image2D depth;

layout(rgba32f, binding = 4)
uniform writeonly image2D gradRotation;

layout(rgba32f, binding = 5)
uniform writeonly image2D gradTranslation;

layout(ra32f, binding = 6)
uniform writeonly image2D cost;

uniform float depthThreshold;

#define KERNEL_SIZE 5

mat2x3 computeSobel(ivec2 coord){
    int x = coord.x;
    int y = coord.y;

    vec3 upperLeft = imageLoad(image, ivec2(x-1,y+1));
    vec3 upperMiddle = imageLoad(image, ivec2(x,y+1));
    vec3 upperRight = imageLoad(image, ivec2(x+1,y+1));
    vec3 left = imageLoad(image, ivec2(x-1,y));
    vec3 right = imageLoad(image, ivec2(x+1,y));
    vec3 lowerLeft = imageLoad(image, ivec2(x-1,y-1));
    vec3 lowerMiddle = imageLoad(image, ivec2(x,y-1));
    vec3 lowerRight = imageLoad(image, ivec2(x+1,y-1));

    vec3 derX = upperLeft + 2*left + lowerLeft - upperRight - 2*right - lowerRight;
    vec3 derY = upperLeft + 2*upperMiddle + upperRight - lowerRight - 2*lowerMiddle - lowerRight;

    return mat2x3(derX.x, derY.x, derX.y, derY.y, derX.z, derY.z);
}

bool isDepthDiscontinuity(ivec2 coord){
    int x = coord.x;
    int y = coord.y;

    if(imageLoad(depth, coord).r == 0) {
        return false;
    }

    float maximum = -1000, minimum = 1000;
    for(int i = -KERNEL_SIZE; i <= KERNEL_SIZE; ++i) {
        for(int j = -KERNEL_SIZE; j <= KERNEL_SIZE; ++j) {
            float d = imageLoad(depth, ivec(x + i, y + j)).r;
            maximum = max(maximum, d);
            minimum = min(minimum, d);
        }
    }
    return maximum - minimum > depthThreshold;
}

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    /* Do a depth filtering step here and use homogenous coordiantes for the reduction */
    if(isDepthDiscontinuity(coord)){
        imageStore(gradRotation, coord, vec4(0));
        imageStore(gradTranslation, coord, vec4(0));
        imageStore(cost, coord, vec4(0));
        return;
    }

    mat3x2 IwrtRot = mat3x2(imageLoad(jac, ivec3(coord, 0)).xy, imageLoad(jac, ivec3(coord, 1)).xy, imageLoad(jac, ivec3(coord, 2)).xy);
    mat3x2 IwrtTrans = mat3x2(imageLoad(jac, ivec3(coord,3)).xy, imageLoad(jac, ivec3(coord, 4)).xy, imageLoad(jac, ivec3(coord, 5)).xy);
    mat2x3 CwrtI = computeSobel(coord);
    vec3 lossGrad = imageLoad(renderedImage, coord).xyz - imageLoad(groundTruthImage, coord).xyz; /*corresponds to a simple squared loss */

    vec3 gradRot = lossGrad * CwrtI * IwrtRot;
    vec3 gradTrans = lossGrad * CwrtI * IwrtTrans;

    imageStore(gradRotation, coord, vec4(gradRot, 1));
    imageStore(gradTranslation, coord, vec4(gradTrans, 1));
    imageStore(cost, coord, vec4(dot(lossGrad, lossGrad), 1, 0, 0));
}
