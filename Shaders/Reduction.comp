layout(local_size_x = 1, local_size_y = 1) in;

layout(rg32f, binding = 0)
uniform readonly image2D costInput;

layout(rg32f, binding = 1)
uniform writeonly image2D costOutput;

layout(rgba32f, binding = 2)
uniform readonly image2D rotationInput;

layout(rgba32f, binding = 3)
uniform writeonly image2D rotationOutput;

layout(rgba32f, binding = 4)
uniform readonly image2D translationInput;

layout(rgba32f, binding = 5)
uniform writeonly image2D translationOutput;

void main()
{
    ivec2 coordOutput = ivec2(gl_GlobalInvocationID.xy);
    ivec2 coordInput = BLOCK_SIZE * coordOutput;

    vec2 sumCost = vec2(0);
    vec4 sumRotation = vec4(0);
    vec4 sumTranslation = vec4(0);

    float minValue, maxValue;

    for(int i = 0; i < BLOCK_SIZE; ++i){
        for(int j = 0; j < BLOCK_SIZE; ++j){
            ivec2 offset = ivec2(i,j);
            sumCost += imageLoad(costInput, coordInput + offset).xy;
            sumRotation += imageLoad(rotationInput, coordInput + offset);
            sumTranslation += imageLoad(translationInput, coordInput + offset);
        }
    }

    imageStore(costOutput, coordOutput, vec4(sumCost, 0, 0));
    imageStore(rotationOutput, coordOutput, sumRotation);
    imageStore(translationOutput, coordOutput, sumTranslation);
}
